package patches.buildTypes

import jetbrains.buildServer.configs.kotlin.*
import jetbrains.buildServer.configs.kotlin.buildFeatures.CommitStatusPublisher
import jetbrains.buildServer.configs.kotlin.buildFeatures.PullRequests
import jetbrains.buildServer.configs.kotlin.buildFeatures.commitStatusPublisher
import jetbrains.buildServer.configs.kotlin.buildFeatures.pullRequests
import jetbrains.buildServer.configs.kotlin.buildSteps.ScriptBuildStep
import jetbrains.buildServer.configs.kotlin.buildSteps.script
import jetbrains.buildServer.configs.kotlin.triggers.VcsTrigger
import jetbrains.buildServer.configs.kotlin.triggers.vcs
import jetbrains.buildServer.configs.kotlin.ui.*

/*
This patch script was generated by TeamCity on settings change in UI.
To apply the patch, change the buildType with id = 'TestingDev001'
accordingly, and delete the patch script.
*/
changeBuildType(RelativeId("TestingDev001")) {
    params {
        expect {
            param("env.PATH_TO_MX", "%env.TERRA_PATH_DEVOPS%/volume/GOCAD/mix/horizons_faults.mx")
        }
        update {
            param("env.PATH_TO_MX", "%env.TERRA_PATH_DEVOPS%/meshes/GOCAD/mix/horizons_faults_small.mx")
        }
        expect {
            param("env.TERRA_PATH_DEVOPS", "Not set")
        }
        update {
            param("env.TERRA_PATH_DEVOPS", "D:/OneDrive - Terranigma Solutions GmbH/Documents - Terranigma Base/DevOps/SubsurfaceTestData/")
        }
    }

    expectSteps {
        script {
            name = "Setup"
            id = "Setup"
            scriptContent = """
                @echo on
                python -m venv venv
                call venv\Scripts\activate
                venv\Scripts\python -m pip install --upgrade pip
                
                echo Checking directory...
                dir
                dir .requirements
                
                venv\Scripts\pip install --verbose -r requirements/requirements.txt
                venv\Scripts\pip install --verbose teamcity-messages
            """.trimIndent()
        }
        script {
            name = "Run Test: Core"
            id = "Run_Test"
            scriptContent = """
                @echo on
                venv\Scripts\python -m pytest --teamcity -v
            """.trimIndent()
        }
        script {
            name = "Run Test: Mesh"
            id = "Run_Test_2"
            enabled = false
            executionMode = BuildStep.ExecutionMode.RUN_ON_FAILURE
            scriptContent = """
                venv\Scripts\pip install --verbose -r requirements/requirements_mesh.txt
                
                @echo on
                set REQUIREMENT_LEVEL=READ_MESH
                echo REQUIREMENT_LEVEL is %REQUIREMENT_LEVEL%
                venv\Scripts\python -m pytest --teamcity -v -m read_mesh
            """.trimIndent()
        }
    }
    steps {
        update<ScriptBuildStep>(0) {
            clearConditions()
            scriptContent = """
                @echo on
                python -m venv venv
                call venv\Scripts\activate
                venv\Scripts\python -m pip install --upgrade pip
                
                echo Checking directory...
                dir
                dir .requirements
                
                venv\Scripts\pip install --verbose -r requirements/requirements_dev.txt
                venv\Scripts\pip install --verbose teamcity-messages
            """.trimIndent()
            param("teamcity.kubernetes.executor.pull.policy", "")
        }
    }

    triggers {
        val trigger1 = find<VcsTrigger> {
            vcs {
                branchFilter = """
                    +pr: draft=false
                    -:refs/heads/main
                    -:<default>
                """.trimIndent()
            }
        }
        trigger1.apply {
            branchFilter = """
                +pr:draft=false
                +:<default>
            """.trimIndent()

        }
    }

    features {
        val feature1 = find<CommitStatusPublisher> {
            commitStatusPublisher {
                vcsRootExtId = "${DslContext.settingsRoot.id}"
                publisher = github {
                    githubUrl = "https://api.github.com"
                    authType = personalToken {
                        token = "credentialsJSON:4df4bdb0-1278-4834-a702-18ae3a286003"
                    }
                }
            }
        }
        feature1.apply {
            vcsRootExtId = ""
        }
        val feature2 = find<PullRequests> {
            pullRequests {
                vcsRootExtId = "${DslContext.settingsRoot.id}"
                provider = github {
                    authType = token {
                        token = "credentialsJSON:4df4bdb0-1278-4834-a702-18ae3a286003"
                    }
                    filterAuthorRole = PullRequests.GitHubRoleFilter.MEMBER
                }
            }
        }
        feature2.apply {
            vcsRootExtId = ""
        }
    }
}
